@page "/"
@using System.Text.Json
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Numbers</PageTitle>

<div id="main-container">
    <h1>Header</h1>
    <h2>Subheader</h2>
    <div>
        <button class="btn btn-light" @onclick="OnClearNumbersHandler">Clear Numbers</button>
        <button class="btn btn-light" @onclick="OnAddNumberHandler">Add Number</button>
        <button class="btn btn-light" @onclick="OnSumNumbersHandler">Sum Numbers</button>
    </div>
    <div class="mt-3">
        @foreach (var num in nums)
        {
            <span class="btn btn-light me-2 mt-1">@num</span>
        }
    </div>
    <div class="mt-4">
        <div class="row">
            <div class="col-auto">
                <span class="fw-bold">Count:</span>
            </div>
            <div class="col ps-0">
                <span>@count</span>
            </div>
        </div>
        <div class="row">
            <div class="col-auto">
                <span class="fw-bold">Sum:</span>
            </div>
            <div class="col">
                <span>@(sum.HasValue ? sum.Value : "Not summed")</span>
            </div>
        </div>
    </div>
</div>

@code {
    int count;
    int? sum;
    List<int> nums = new List<int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int? countFromSessionStorage = await sessionStorage.GetItemAsync<int?>("count");
            if (countFromSessionStorage.HasValue)
            {
                count = countFromSessionStorage.Value;
            }
            else
            {
                count = default(int);
            }

            string serializedNumsFromSessionStorage = await sessionStorage.GetItemAsync<string>("nums");
            if (!string.IsNullOrEmpty(serializedNumsFromSessionStorage))
            {
                nums = JsonSerializer.Deserialize<List<int>>(serializedNumsFromSessionStorage);
            }

            int? sumFromSessionStorage = await sessionStorage.GetItemAsync<int?>("sum");
            if (sumFromSessionStorage.HasValue)
            {
                sum = sumFromSessionStorage;
            }
            else
            {
                sum = default(int?);
            }

            StateHasChanged();
        }        
    }

    Random random = new Random();

    private async Task OnAddNumberHandler()
    {
        AddNumber();
        await SetCountSessionStorageValue();
    }

    private async Task SetCountSessionStorageValue()
    {
        await sessionStorage.SetItemAsync("count", count);
        string serializedNumbers = JsonSerializer.Serialize(nums);
        await sessionStorage.SetItemAsync("nums", serializedNumbers);
    }

    private void AddNumber()
    {
        int randomNum = random.Next(1000);
        nums.Add(randomNum);
        count++;
    }

    private async Task OnClearNumbersHandler()
    {
        ClearNumbers();
        await ClearSessionStorage();
    }

    private void ClearNumbers()
    {
        nums.Clear();
        count = default(int);
        sum = default(int?);
    }

    private async Task ClearSessionStorage()
    {
        await sessionStorage.ClearAsync();
    }

    private async Task OnSumNumbersHandler()
    {
        SumNumbers();
        await SetSumSessionStorageValue();
    }

    private void SumNumbers()
    {
        sum = nums.Sum();
    }

    private async Task SetSumSessionStorageValue()
    {
        await sessionStorage.SetItemAsync("sum", sum);
    }
}